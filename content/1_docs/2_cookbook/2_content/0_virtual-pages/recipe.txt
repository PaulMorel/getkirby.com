Title: Content from other data sources

----


Text:

Since Kirby is a flat-file CMS, pages that make up your website usually exist as files and folders in the filesystem. This has many advantages: your web project can be version controlled, you don't have to deal with a database, it's easy to make backups, you can manually edit your content if you want, and last not least, it's also very fast. At least up to a certain point where it doesn't scale too well any more.

From the early days of Kirby, it was possible to include data from other sources into your Kirby-built website. But with our new architecture, you can really integrate content from any sources - from databases, from external APIs, or Excel sheets–you name them. 

You can swap out Kirby's storage mechanism on a per-model basis, just like you can replace almost any Kirby component, allowing you to flexibly combine all sorts of data sources.

This section will you an overview about all the possibilites Kirby offers.

Virtual pages can be used for both just consuming content, for example, from a read-only API. Or you can actually create adaptors to read from and write to database tables, spreadsheets or whatever.

<info>
We refer to anything that does not exists as folders and files as "virtual pages".
</info>

## The most simple form of a virtual page

Using Kirby's router, you can quickly create a new page from a route pattern:

```php "/site/config/config.php"
<?php

return [
    'routes' => [
        [
          'pattern' => 'virtual',
          'action'  => function () {
                $data = [
                    'slug' => 'virtual',
                    'parent' => null,
                    'template' => 'virtual',
                    'model' => 'virtual',
                    'content' => [
                        'title' => 'This is not a real page',
                        'date'  => '2019-05-01',
                        'text'  => 'The Big Oxmox advised her not to do so, because there were thousands of bad Commas, wild Question Marks and devious Semikoli, but the Little Blind Text didn’t listen.'
                    ]
                ];
                return Page::factory($data);
          }
        ]
    ]
];
```

This page uses the `virtual` template, so let's create one based on the `note.php`template.:

```php "/site/templates/virtual.php"

<?php snippet('header') ?>
<main>
  <article class="note">
    <header class="note-header intro">
      <h1><?= $page->title() ?></h1>
      <time class="note-date"><?= $page->date()->toDate('d F Y') ?></time>
    </header>

    <div class="note-text text">
      <?= $page->text()->kt() ?>
    </div>
  </article>
</main>
<?php snippet('footer') ?>
```

If we open `http://yourdomain.com/virtual` in the browser, we will see the new page.

It's also possible to create a multi-language version of this page, by adding the `translations` array with the content for every language version.


```php "/site/config/config.php"
<?php

return [
    'languages' => true,
    'routes' => [
        [
          'pattern' => '(de|en)/virtual',
          'action'  => function ($lang) {
                $data = [
                    'slug' => 'virtual',
                    'parent' => page('notes'),
                    'template' => 'default',
                    'num' => '20190501',
                    'translations' => [
                        'en' => [
                            'code' => 'en',
                            'content' => [
                                'title' => 'This is not a real page',
                                'date'  => '2019-05-01',
                                'text'  => 'The Big Oxmox advised her not to do so, because there were thousands of bad Commas, wild Question Marks and devious Semikoli, but the Little Blind Text didn’t listen.'
                            ]
                        ],
                        'de' => [
                            'code' => 'de',
                            'content' => [
                                'title' => 'Das ist keine Seite',
                                'date'  => '2019-05-01',
                                'text'  => 'Weit hinten, hinter den Wortbergen, fern der Länder Vokalien und Konsonantien leben die Blindtexte. Abgeschieden wohnen sie in Buchstabhausen an der Küste des Semantik, eines großen Sprachozeans.'
                        ]
                        ]
                    ],               
                ];
                $page = Page::factory($data);
                site()->visit($page, $lang);
                
                return $page;
          }
        ]
    ]
];
```

These hard coded examples are not that useful yet, but they should already give you an idea how the `factory` method helps us to create pages from whatever content we pass to it.

## Consuming content from an API

For this example, we use a freely accessible API, in this case the (link: text: New York Times Movie Review API).

To follow this example, create an account and an example app (link: text: by following the instructions).


First, create a parent page, e.g. `books` in the `/content` folder and inside it, a books.txt text file.

```kirbycontent "/content/reviews/review.txt"
   Title: Movie reviews

   ----
   Intro: This page lists all available movie reviews from the NYT movie review API.
```   

### The page model

```php "/site/models/reviews.php"
<?php

class ReviewsPage extends Kirby\Cms\Page
{
    public function children()
    {
        $request = Remote::request('https://api.nytimes.com/svc/movies/v2/reviews/picks.json?api-key=api-key');
        $content = json_decode($request->content());
        $status = $content->status ?? false; 
        $results = [];
        if ($status == 'OK') {
            $results = $content->results;
        };
        $pages = [];
        foreach ($results as $key => $review) {
            $pages[] = [
                'slug'     => str::slug($review->display_title),
                'num'      => $key+1,
                'template' => 'review',
                'content'  => [
                    'title'            => $review->display_title,
                    'headline'         => $review->headline,
                    'byline'           => $review->byline,
                    'summary_short'    => $review->summary_short,
                    'publication_date' => $review->publication_date,
                    'link_url'         => $review->link->url,
                    'link_title'       => $review->link->suggested_link_text,
                    'image_link'       => $review->multimedia->src

                ]
            ];
        }
        return Pages::factory($pages, $this);
    }
}
```

### The overview template


```php "/site/templates/reviews.php"
<?php snippet('header') ?>

<main>
  <header class="intro">
    <h1><?= $page->title() ?></h1>
  </header>
<?php dump($page->children()) ?>
  <ul class="albums"<?= attr(['data-even' => $page->children()->listed()->isEven()], ' ') ?>>
    <?php foreach ($page->children() as $review): ?>
    <li>
      <h2><?= $review->title() ?></h2>
      <a href="<?= $review->url() ?>">Read review summary</a>
    </li>
    <?php endforeach ?>
  </ul>
</main>

<?php snippet('footer') ?>
```

### The child page template

```php "/site/templates/review.php"
<?php snippet('header') ?>

<main>
  <article class="note">
    <header class="note-header intro">
      <h1><?= $page->title() ?></h1>
      <time class="note-date"><?= $page->publication_date()->toDate('d F Y') ?></time>
    </header>

    <div class="note-text text">
    <h2><?= $page->headline() ?></h2>
    <p>by <?= $page->byline() ?></p>
      <?= $page->summary_short() ?>
      <?php if ($page->image_link()->isNotEmpty()) ?>
      <img src="<?= $page->image_link() ?>" alt="">
    </div>
  </article>
</main>

<?php snippet('footer') ?>
```

## Reading from and writing to a database

Content can also come from a database. This is particularly useful if you already have a large set of data stored in a MySQL or other relational database, like products or articles. In only a few steps you can transform data from those databases into Kirby pages that behave like any Kirby page in the frontend, i.e. you can use Kirby's API to access, filter or search content, and edit it in the Panel together with all your file based content.

Our cookbook recipe (link: docs/cookbook/content/pages-from-database text: "Creating pages from a database") has an example how to connect to a database with comments and create pages from content in that database–including editing this data store from within the Panel.



